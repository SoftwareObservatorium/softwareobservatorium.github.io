"use strict";(self.webpackChunklasso=self.webpackChunklasso||[]).push([[6035],{3:(e,n,t)=>{t.r(n),t.d(n,{default:()=>I});var a=t(6540),s=t(4025),i=t(5260),o=t(3551),r=t(7156),l=t(5292),m=t(5430),p=t(4939),c=t(7289);class d{static MAP={HELLO_WORLD_QUICKSTART:{label:"Hello World (JDK Collections)",description:"Explore the 'Hello World' quickstart example",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'HelloWorld') {\n\n    /* create stimulus matrix */\n    action(name: 'create') {\n        execute {\n            // from JDK classes\n            stimulusMatrix('Stack', \"\"\"Stack {\n                    push(java.lang.String)->java.lang.String\n                    size()->int }\"\"\",\n                    [\n                            implementation(\"1\", \"java.util.Stack\"),\n                            implementation(\"2\", \"java.util.ArrayDeque\"),\n                            implementation(\"3\", \"java.util.LinkedList\")\n                    ], [\n                    test(name: 'testPush()') {\n                        row '',    'create', 'Stack'\n                        row '',  'push',   'A1',     '\"Hello World!\"'\n                        row '',  'size',   'A1'\n                    }])\n        }\n    }\n    /* Execute stimulus matrix and obtain stimulus response matrix */\n    action(name: 'filter', type: 'Arena') {\n        dependsOn 'create'\n        include 'Stack'\n        profile('java17Profile') {\n            scope('class') { type = 'class' }\n            environment('java17') {\n                image = 'maven:3.9-eclipse-temurin-17' // docker image (JDK 17)\n            }\n        }\n    }\n}\n            ",srmpath:"/web/srm/HELLO_WORLD_QUICKSTART.parquet",classifier:"quickstart, example"},BASE64_ENCODE_DECODE_MAVEN:{label:"Base64 Encode/Decode (Maven Artifacts)",description:"Explore how Maven artifacts can be used as part of stimulus matrices",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'Base64encodedecode') {\n\n    action(name: 'create') {\n        execute {\n            // from known maven artifact (assuming maven repository is able to provide the artifact)\n            stimulusMatrix('Base64', \"\"\"Base64{\n                    encode(byte[])->byte[]\n                    decode(java.lang.String)->byte[]\n                }\n                \"\"\", [\n                    implementation(\"1\", \"org.apache.commons.codec.binary.Base64\", \"commons-codec:commons-codec:1.15\"),\n            ], [ // tests\n                 test(name: 'testEncode()') {\n                     row '', 'create', 'Base64'\n                     row '\"dXNlcjpwYXNz\".getBytes()', 'encode', 'A1', '\"user:pass\".getBytes()'\n                 },\n                 test(name: 'testEncode_padding()') {\n                     row '', 'create', 'Base64'\n                     row '\"SGVsbG8gV29ybGQ=\".getBytes()', 'encode', 'A1', '\"Hello World\".getBytes()'\n                 }])\n        }\n    }\n\n    action(name: 'test', type: 'Arena') {\n        features = ['cc'] // enable code coverage measurement (class scope)\n        maxAdaptations = 1 // how many adaptations to try\n\n        dependsOn 'create'\n        include 'Base64'\n        profile('java17Profile') {\n            scope('class') { type = 'class' }\n            environment('java17') {\n                image = 'maven:3.9-eclipse-temurin-17' // docker image (JDK 17)\n            }\n        }\n    }\n}\n            ",srmpath:"/web/srm/BASE64_ENCODE_DECODE_MAVEN.parquet",classifier:"example"},BOUNDED_QUEUE_MUTATION:{label:"Mutation Testing with LASSO",description:"Explore how Mutation Testing can be used. The example demonstrates mutation testing based on an implementation of a bounded queue",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'BoundedQueue-Mutation') {\n\n    action(name: 'select') {\n        execute {\n            // from JDK classes\n            stimulusMatrix('BoundedQueue', \"\"\"MyBoundedQueue {\n                    MyBoundedQueue(int)\n                    enQueue(java.lang.Object)->void\n                    deQueue()->java.lang.Object\n                    isEmpty()->boolean\n                    isFull()->boolean\n                }\n                \"\"\",\n                    [\n                            implementation(\"1\", \"demo_examples.BoundedQueue\")\n                    ], [\n                    test(name: 'testEnqueue()') {\n                        row '', 'create', 'MyBoundedQueue', '10'\n                        row '', 'enQueue', 'A1', '\"Hello World!\"'\n                        row '', 'isEmpty', 'A1'\n                        row '', 'isFull', 'A1'\n                        row '', 'deQueue', 'A1'\n                        row '', 'isEmpty', 'A1'\n                    }\n            ])\n        }\n    }\n\n    action(name: 'test', type: 'Arena') { // filter by tests\n        adapterStrategy = 'PassThroughAdaptationStrategy'\n        features = [\"mutation\"]\n\n        dependsOn 'select'\n        include 'BoundedQueue'\n        profile('java17Profile') {\n            scope('class') { type = 'class' }\n            environment('java17') {\n                image = 'maven:3.9-eclipse-temurin-17' // docker image (JDK 17)\n            }\n        }\n    }\n}\n            ",srmpath:"/web/srm/BOUNDED_QUEUE_MUTATION.parquet",classifier:"example"},OPENAI_GEN:{label:"Generate with OpenAI gpt4-o-mini",description:"Explore how OpenAI's GPT models can be used with LASSO to prompt for code solutions and tests. The functionality sought after is taken from the HumanEval benchmark (e.g., coding problem HumanEval_13_greatest_common_divisor)",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'ChatGPT') {\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            def myProblems = [humanEval.abstractions['HumanEval_13_greatest_common_divisor']]\n            myProblems.each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n        }\n    }\n\n    action(name: 'generateCodeGpt', type: 'GenerateCodeOpenAI') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java17Profile') // evosuite 11\n\n        // action configuration block\n        apiKey = \"demo\" // see https://docs.langchain4j.dev/integrations/language-models/open-ai/\n        model = \"gpt-4o-mini\"\n        samples = 1\n\n        // custom DSL command offered by the action (for each stimulus matrix, create one prompt to obtain impls)\n        prompt { stimulusMatrix ->\n            // can by for any prompts: FA, impls, models etc.\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'generateTestsGpt', type: 'GenerateTestsOpenAI') {\n        // pipeline specific\n        dependsOn 'generateCodeGpt'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block\n        apiKey = \"demo\" // see https://docs.langchain4j.dev/integrations/language-models/open-ai/\n        model = \"gpt-4o-mini\"\n        samples = 1\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"generate a junit test class to test the functionality of the following interface specification: ```${stimulusMatrix.lql}```. Assume that the specification is encapsulated in a class that uses the same naming as in the interface specification. Only output the JUnit test class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'execute', type: 'Arena') {\n        maxAdaptations = 1 // how many adaptations to try\n\n        dependsOn 'generateTestsGpt'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/OPENAI_GEN.parquet",classifier:"example"},OLLAMA_GEN:{label:"Generate with Ollama (llama3.1)",description:"Explore how Ollama and compatible models can be used with LASSO to prompt for code solutions and tests. The functionality sought after is taken from the HumanEval benchmark (e.g., coding problem HumanEval_13_greatest_common_divisor)",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'Ollama-Parallel') {\n\n    // profile for execution\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            def myProblems = [humanEval.abstractions['HumanEval_13_greatest_common_divisor']]\n            myProblems.each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n        }\n    }\n\n    action(name: 'generateCodeLlama', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block\n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\", \"http://dybbuk.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 5 // FIXME how many to sample\n        promptRequestThreads = 4 // parallel threads\n\n        // custom DSL command offered by the action (for each stimulus matrix, create one prompt to obtain impls)\n        prompt { stimulusMatrix ->\n            // can by for any prompts: FA, impls, models etc.\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'generateTestsLlama', type: 'GenerateTestsOllama') {\n        // pipeline specific\n        dependsOn 'generateCodeLlama'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block\n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\", \"http://dybbuk.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 10\n        promptRequestThreads = 4 // parallel threads\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"generate a junit test class to test the functionality of the following interface specification: ```${stimulusMatrix.lql}```. Assume that the specification is encapsulated in a class that uses the same naming as in the interface specification. Only output the JUnit test class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'execute', type: 'Arena') { // run all collected stimulus sheets on all impls in arena\n        maxAdaptations = 1 // how many adaptations to try\n\n        dependsOn 'generateTestsLlama'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/OLLAMA_GEN.parquet",classifier:"example"},STACK_PARAMETERIZED:{label:"Parameterized Sequence Sheets",description:"Explore how sequence sheets can be parameterized (here using an example of Stack implementations)",lsl:"dataSource 'lasso_quickstart'\n// interface in LQL notation\ndef interfaceSpec = \"\"\"Stack {\n    push(java.lang.String)->java.lang.String\n    size()->int\n}\n\"\"\"\nstudy(name: 'Stack') {\n\n    action(name: 'create') {\n        stimulusMatrix('Stack', interfaceSpec, // abstraction details\n                [ // implementations\n                  implementation(\"1\", \"java.util.Stack\"),\n                  implementation(\"2\", \"java.util.ArrayDeque\"),\n                  implementation(\"3\", \"java.util.LinkedList\")\n                ],\n                [ // tests\n                  test(name: 'testPush()') {\n                      row '', 'create', 'Stack'\n                      row '', 'push', 'A1', '\"Hi\"'\n                      row '', 'size', 'A1'\n                  },\n                  test(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Hello World!\") {\n                      row '', 'create', 'Stack'\n                      row '', 'push', 'A1', '?p1'\n                      row '', 'size', 'A1'\n                  },\n                  test(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Bla blub!\") // e.g., parameterized\n                ]\n        )\n    }\n\n    action(name: 'test', type: 'Arena') { // run all tests\n        maxAdaptations = 1 // how many adaptations to try\n\n        dependsOn 'create'\n        include 'Stack'\n        profile('java17Profile') {\n            scope('class') { type = 'class' }\n            environment('java17') {\n                image = 'maven:3.9-eclipse-temurin-17' // docker image (JDK 17)\n            }\n        }\n    }\n}\n            ",srmpath:"/web/srm/STACK_PARAMETERIZED.parquet",classifier:"example"},STACK_TYPEAWARETEST:{label:"Type-aware Test Mutation",description:"Explore how existing sequence sheets can be mutated",lsl:"dataSource 'lasso_quickstart'\n// interface in LQL notation\ndef interfaceSpec = \"\"\"Stack {\n    push(java.lang.String)->java.lang.String\n    size()->int\n}\n\"\"\"\nstudy(name: 'Stack') {\n\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17' // docker image (JDK 17)\n        }\n    }\n\n    action(name: 'select') {\n        stimulusMatrix('Stack', interfaceSpec, // abstraction details\n                [ // implementations\n                  implementation(\"1\", \"java.util.Stack\"),\n                  implementation(\"2\", \"java.util.ArrayDeque\"),\n                  implementation(\"3\", \"java.util.LinkedList\")\n                ],\n                [ // tests\n                  test(name: 'testPush()') {\n                      row '',  'create', 'Stack'\n                      row '',  'push',   'A1',     '\"Hi\"'\n                      row '',  'size',   'A1'\n                  },\n                  test(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Hello World!\") {\n                      row '',  'create', 'Stack'\n                      row '',  'push',   'A1',     '?p1'\n                      row '',  'size',   'A1'\n                  },\n                  test(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Bla blub!\") // e.g., parameterized\n                ]\n        )\n    }\n\n    action(name: 'typeAware', type: 'TypeAwareMutatorTestGen') { // add more tests\n        noOfTests = 1 // create one mutation per test\n\n        dependsOn 'select'\n        include 'Stack'\n    }\n\n    action(name: 'test', type: 'Arena') { // run all tests\n        maxAdaptations = 1 // how many adaptations to try\n\n        dependsOn 'typeAware'\n        include 'Stack'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/STACK_TYPEAWARETEST.parquet",classifier:"example"},DGAI_LLM:{label:"Differential GAI with many Test Generators and LLMs (LLAMA and DeepSeek-R1)",description:"Explore how LASSO can be used to realized Differential GAI",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'DGAI') {\n\n    // profile for execution\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n\n    // profile for execution\n    profile('java11Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.6.3-openjdk-11' // EvoSuite won't run in > JDK 11\n        }\n    }\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            def myProblems = [humanEval.abstractions['HumanEval_13_greatest_common_divisor']]\n            myProblems.each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests) // id, interface, impls, tests\n            }\n        }\n    }\n\n    action(name: 'generateCodeLlama', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java11Profile') // evosuite 11\n\n        // action configuration block\n        ollamaBaseUrl = \"http://bagdana.informatik.uni-mannheim.de:11434\"\n        model = \"llama3.1:latest\"\n        samples = 10 // how many to sample\n        javaVersion = \"11\" // because of EvoSuite ..\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'generateCodeDeepSeek', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'generateCodeLlama'\n        include '*'\n        profile('java11Profile') // evosuite 11\n\n        // action configuration block\n        ollamaBaseUrl = \"http://bagdana.informatik.uni-mannheim.de:11434\"\n        model = \"deepseek-r1:32b\"\n        samples = 10 // how many to sample\n        javaVersion = \"11\" // because of EvoSuite ..\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    // add tests (mutates existing tests)\n    action(name: 'typeAware', type: 'TypeAwareMutatorTestGen') { // add more tests\n        noOfTests = 1 // create one mutation per test\n\n        dependsOn 'generateCodeDeepSeek'\n        include '*'\n    }\n\n    // add tests: randomly add new\n    action(name: 'random', type: 'RandomTestGen') { // add more tests\n        noOfTests = 5 // create 5 additional random tests\n        shuffleSequence = false\n\n        dependsOn 'typeAware'\n        include '*'\n    }\n\n    action(name: 'generateTestsLlama', type: 'GenerateTestsOllama') {\n        // pipeline specific\n        dependsOn 'random'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block\n        ollamaBaseUrl = \"http://bagdana.informatik.uni-mannheim.de:11434\"\n        model = \"llama3.1:latest\"\n        samples = 10 // how many to sample\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"generate a junit test class to test the functionality of the following interface specification: ```${stimulusMatrix.lql}```. Assume that the specification is encapsulated in a class that uses the same naming as in the interface specification. Only output the JUnit test class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'generateTestsDeepSeek', type: 'GenerateTestsOllama') {\n        // pipeline specific\n        dependsOn 'generateTestsLlama'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block\n        ollamaBaseUrl = \"http://bagdana.informatik.uni-mannheim.de:11434\"\n        model = \"deepseek-r1:32b\"\n        samples = 10 // how many to sample\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"generate a junit test class to test the functionality of the following interface specification: ```${stimulusMatrix.lql}```. Assume that the specification is encapsulated in a class that uses the same naming as in the interface specification. Only output the JUnit test class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    // add tests: SBST\n    action(name: 'evoSuite', type: 'EvoSuite') {\n        searchBudget = 60 // we need this as upper bound for timeouts\n        stoppingCondition = \"MaxTime\"\n        //criterion = \"LINE:BRANCH:EXCEPTION:WEAKMUTATION:OUTPUT:METHOD:METHODNOEXCEPTION:CBRANCH\"\n        cleanExecutables = false\n\n        dependsOn 'generateTestsDeepSeek'\n        include '*'\n        profile('java11Profile')\n    }\n\n    action(name: 'execute', type: 'Arena') { // run all collected stimulus sheets in arena\n        maxAdaptations = 1 // how many adaptations to try\n        //features = [\"cc\", \"mutation\"]\n\n        dependsOn 'evoSuite'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/DGAI.parquet",classifier:"dgai, example"},BENCHMARK_CODELLM:{label:"Replication of HumanEval-J/MBPP-J Benchmark",description:"Explore how LASSO can be used to replicate studies and reuse their designs, here based on the example of HumanEval-J (MultiPL-E)",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'HumanEval-OriginalPrompt-ShowCode') {\n\n    // profile for execution\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n    def mbpp = loadBenchmark(\"mbpp-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            humanEval.abstractions.values().each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n\n            mbpp.abstractions.values().each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n        }\n    }\n\n    action(name: 'generateCodeLlama', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block \n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\", \"http://dybbuk.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 10 // how many to sample\n        javaVersion = \"17\" // because of EvoSuite ..\n\n        promptRequestThreads = 4 // parallel threads\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            // get original prompt from benchmark\n            prompt.promptContent = humanEval.abstractions[stimulusMatrix.name].prompt\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'measureCoverage', type: 'Arena') { // run all collected stimulus sheets in arena\n        maxAdaptations = 1 // how many adaptations to try\n        features = [\"cc\"]\n\n        dependsOn 'generateCodeLlama'\n        include '*'\n        profile('java17Profile')\n    }\n\n    action(name: 'generateTestsLlama', type: 'GenerateTestsOllama') {\n        // pipeline specific\n        dependsOn 'measureCoverage'\n        include '*'\n        profile('java17Profile')\n\n        // action configuration block \n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\", \"http://dybbuk.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 1 // how many to sample\n        promptRequestThreads = 4 // parallel threads\n\n        prompt { stimulusMatrix ->\n            List prompts = stimulusMatrix.implementations.collect { impl ->\n                def prompt = [:] // create prompt model\n                prompt.promptContent = \"\"\"generate a junit test class to test the functionality of the following java class `${impl.code.name}` : ```${impl.code.content}```. Initialize the class and call its methods. Only output the JUnit test class and nothing else.\"\"\"\n                prompt.id = \"lql_prompt\"\n                return prompt\n            }\n\n            return prompts\n        }\n    }\n\n    action(name: 'execute', type: 'Arena') { // run all collected stimulus sheets in arena\n        maxAdaptations = 1 // how many adaptations to try\n        features = [\"cc\"]\n\n        dependsOn 'generateTestsLlama'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/HUMANEVAL.parquet",classifier:"benchmark, replication, humaneval, mbpp, example"},EVOSUITE_LLM:{label:"Diversity-driven Test Generation with EvoSuite and HumanEval-J",description:"Explore how EvoSuite automated unit test generation can be used in LASSO with HumanEval-J (MultiPL-E) to realize diversity-driven test generation",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'Evosuite-LLM') {\n\n    // profile for execution\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n\n    // profile for execution\n    profile('java11Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.6.3-openjdk-11' // EvoSuite won't run in > JDK 11\n        }\n    }\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            def myProblems = [humanEval.abstractions['HumanEval_13_greatest_common_divisor']]\n            myProblems.each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n        }\n    }\n\n    action(name: 'generateCodeLlama', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java11Profile') // evosuite 11\n\n        // action configuration block\n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 3 // how many to sample\n        javaVersion = \"11\" // because of EvoSuite ..\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'generateCodeDeepSeek', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'generateCodeLlama'\n        include '*'\n        profile('java11Profile') // evosuite 11\n\n        // action configuration block\n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\"]\n        model = \"deepseek-r1:32b\"\n        samples = 3 // how many to sample\n        javaVersion = \"11\" // because of EvoSuite ..\n\n        prompt { stimulusMatrix ->\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    // add tests: SBST\n    action(name: 'evoSuite', type: 'EvoSuite') {\n        searchBudget = 30 // we need this as upper bound for timeouts\n        stoppingCondition = \"MaxTime\"\n        //criterion = \"LINE:BRANCH:EXCEPTION:WEAKMUTATION:OUTPUT:METHOD:METHODNOEXCEPTION:CBRANCH\"\n\n        dependsOn 'generateCodeDeepSeek'\n        include '*'\n        profile('java11Profile')\n    }\n\n    action(name: 'test', type: 'Arena') { // run all collected stimulus sheets on all impls in arena\n        maxAdaptations = 1 // how many adaptations to try\n        //features = [\"cc\", \"mutation\"]\n\n        dependsOn 'evoSuite'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/EVOSUITE_humaneval.parquet",classifier:"evosuite, benchmark, humaneval, example"},CODECLONE_NICAD:{label:"Code Clone Detection with Nicad6.2",description:"Explore how Nicad's code clone detection can be used in LASSO to filter SRMs",lsl:"dataSource 'lasso_quickstart'\nstudy(name: 'CodeClone') {\n\n    // profile for execution\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n\n    // load benchmark\n    def humanEval = loadBenchmark(\"humaneval-java-reworded\")\n\n    action(name: 'createStimulusMatrices') {\n        execute {\n            // create stimulus matrices for given problems\n            def myProblems = [humanEval.abstractions['HumanEval_13_greatest_common_divisor']]\n            myProblems.each { problem ->\n                stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n            }\n        }\n    }\n\n    action(name: 'generateCodeLlama', type: 'GenerateCodeOllama') {\n        // pipeline specific\n        dependsOn 'createStimulusMatrices'\n        include '*'\n        profile('java17Profile') // evosuite 11\n\n        // action configuration block\n        servers = [\"http://bagdana.informatik.uni-mannheim.de:11434\"]\n        model = \"llama3.1:latest\"\n        samples = 5 // how many to sample\n\n        // custom DSL command offered by the action (for each stimulus matrix, create one prompt to obtain impls)\n        prompt { stimulusMatrix ->\n            // can by for any prompts: FA, impls, models etc.\n            def prompt = [:] // create prompt model\n            prompt.promptContent = \"\"\"implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else.\"\"\"\n            prompt.id = \"lql_prompt\"\n            //prompt.model = \"llama3.1:latest\"\n            return [prompt] // list of prompts is expected\n        }\n    }\n\n    action(name: 'codeClones', type: 'Nicad6') {\n        collapseClones = true // drop clones from stimulus matrix\n\n        dependsOn 'generateCodeLlama'\n        include '*'\n        profile('nicad:6.2')\n    }\n\n    action(name: 'test', type: 'Arena') { // run all collected stimulus sheets on all impls in arena\n        maxAdaptations = 1 // how many adaptations to try\n        //features = [\"cc\", \"mutation\"]\n\n        dependsOn 'codeClones'\n        include '*'\n        profile('java17Profile')\n    }\n}\n            ",srmpath:"/web/srm/CODECLONE_NICAD.parquet",classifier:"code clone, nicad, example"}}}var u=t(8553),h=t(8968),f=t(6786),v=t(7669),b=t(5e3),g=t(1543),A=t(5610),E=t(2726),S=t(3984),x=t(5281),T=t(4335),y=t(4848);const j=e=>{let{fileName:n}=e;const[t,s]=(0,a.useState)(),[i,r]=(0,a.useState)(),[c,d]=(0,a.useState)(""),[h,f]=(0,a.useState)("Select * from tdse_srm.parquet"),v=(0,a.useRef)(),[j,w]=(0,a.useState)([]),[D,O]=(0,a.useState)([]),k=(0,a.useRef)(null),I=(0,a.useRef)(null),C=async(e,t,a)=>{if(k.current&&k.current.getModel().setValue(a),!v.current){const e=A.vP(),t=await A.DF(e),a=URL.createObjectURL(new Blob([`importScripts("${t.mainWorker}");`],{type:"text/javascript"})),s=new Worker(a),i=new A.Cr,o=new A.Ed(i,s);await o.instantiate(t.mainModule,t.pthreadWorker),URL.revokeObjectURL(a);const r={query:{castBigIntToDouble:!0}};o.open(r),console.log("loaded duckdb");let l=(await T.A.get(`${n}`,{responseType:"arraybuffer"})).data;await o.registerFileBuffer("tdse_srm.parquet",new Uint8Array(await l)),console.log("registered parquet file"),v.current=o}const s=await v.current.connect(),i=(await s.query(`\n        ${a}\n    `)).toArray().map((e=>e.toJSON())),o=Object.keys(i[0]).map((e=>({field:e,headerName:e,width:150})));O(o);w(i),await s.close()},M=e=>{C(0,0,e),f(e)},_=e=>{let n;n=e?`PIVOT (SELECT SHEETID, X, Y, CONCAT(SYSTEMID,'_',VARIANTID,'_',ADAPTERID) as SYSTEMID, value from tdse_srm.parquet where type = '${e}') ON SYSTEMID USING first(VALUE) ORDER BY SHEETID, X, Y`:"PIVOT (SELECT SHEETID, X, Y, CONCAT(SYSTEMID,'_',VARIANTID,'_',ADAPTERID) as SYSTEMID, value, type from tdse_srm.parquet) ON SYSTEMID USING first(VALUE) ORDER BY SHEETID, X, Y",f(n),C(0,0,n)};return(0,y.jsxs)(a.Fragment,{children:[(0,y.jsx)(o.A,{variant:"h6",component:"div",children:"Explore SRM data using duckdb in your browser"}),(0,y.jsxs)(l.A,{children:[(0,y.jsx)(o.A,{gutterBottom:!0,sx:{color:"text.secondary",fontSize:18},children:"SQL (duckdb-wasm)"}),(0,y.jsx)(o.A,{variant:"h5",component:"div",children:(0,y.jsx)(u.KE,{height:"100px",defaultLanguage:"sql",defaultValue:h,onMount:function(e,n){n.languages.register({id:"sql"}),I.current=n,k.current=e},onChange:(e,n)=>{e&&f(e)}})})]}),(0,y.jsx)(m.A,{}),(0,y.jsxs)(b.A,{variant:"contained","aria-label":"Basic button group",children:[(0,y.jsx)(p.A,{onClick:e=>{C(0,0,"Select * from tdse_srm.parquet")},children:"Load Raw SRM parquet"}),(0,y.jsx)(p.A,{onClick:e=>(C(0,0,h),void f(h)),children:"Query SQL"}),(0,y.jsx)(p.A,{onClick:e=>M("select SHEETID from tdse_srm.parquet group by SHEETID order by SHEETID"),children:"Show Tests"}),(0,y.jsx)(p.A,{onClick:e=>M("select SHEETID, X, Y from tdse_srm.parquet where X >= 0 and Y >= 0 group by SHEETID, X, Y order by SHEETID, X, Y"),children:"Show Test Statements"}),(0,y.jsx)(p.A,{onClick:e=>M("select SYSTEMID from tdse_srm.parquet where SYSTEMID != 'abstraction' and SYSTEMID != 'oracle' group by SYSTEMID"),children:"Show Compilation Units"}),(0,y.jsx)(p.A,{onClick:e=>M("select SYSTEMID, VARIANTID, ADAPTERID from tdse_srm.parquet where SYSTEMID != 'abstraction' and SYSTEMID != 'oracle' group by SYSTEMID, VARIANTID, ADAPTERID"),children:"Show Executed Implementations"}),(0,y.jsx)(p.A,{onClick:e=>_("value"),children:"View Outputs"}),(0,y.jsx)(p.A,{onClick:e=>_("service"),children:"View Services"}),(0,y.jsx)(p.A,{onClick:e=>_("input_value"),children:"View Inputs"}),(0,y.jsx)(p.A,{onClick:e=>_("op"),children:"View Operations"}),(0,y.jsx)(p.A,{onClick:e=>_(void 0),children:"View All"})]}),(0,y.jsx)(g.A,{}),(0,y.jsxs)(b.A,{variant:"contained","aria-label":"Basic button group",children:[(0,y.jsx)(p.A,{onClick:e=>M("select count(*) as cluster_size, list(SYSTEMID) as cluster_implementations, * EXCLUDE (SYSTEMID) from (PIVOT (SELECT CONCAT(SHEETID,'@',X, ',', Y) as statement, CONCAT(SYSTEMID,'_',VARIANTID,'_',ADAPTERID) as SYSTEMID, value from tdse_srm.parquet where type = 'value') ON STATEMENT USING first(VALUE) ORDER BY SYSTEMID) as mypiv group by all order by cluster_size DESC"),children:"Cluster-based Voting"}),(0,y.jsx)(p.A,{onClick:e=>M("select count(*) as cluster_size, list(SYSTEMID) as cluster_implementations, * EXCLUDE (SYSTEMID) from (PIVOT (SELECT CONCAT(SHEETID,'@',X, ',', Y) as statement, CONCAT(SYSTEMID,'_',VARIANTID,'_',ADAPTERID) as SYSTEMID, value from tdse_srm.parquet where type = 'value' and y > 0) ON STATEMENT USING first(VALUE) ORDER BY SYSTEMID) as mypiv group by all order by cluster_size DESC"),children:"Cluster-based Voting (Ignore Create)"})]}),(0,y.jsx)(g.A,{}),(0,y.jsxs)(b.A,{variant:"contained","aria-label":"Basic button group",children:[(0,y.jsx)(p.A,{onClick:e=>M("\n-- pick oracle based on test-based voting (based on mode; most frequent value per test statement)\nSelect \n    ABSTRACTIONID,\n    SHEETID,\n    X,\n    Y,\n    MODE(VALUE) as test_based_oracle,\n    list(DISTINCT VALUE) as distinct_values,\n    (select list(CONCAT(SYSTEMID, '_', VARIANTID, '_', ADAPTERID) ORDER BY SYSTEMID, VARIANTID, ADAPTERID) from tdse_srm.parquet where VALUE = test_based_oracle and TYPE = 'value' and ABSTRACTIONID = tbl1.ABSTRACTIONID and SHEETID = tbl1.SHEETID and X = tbl1.X and Y=tbl1.Y) as matches\nfrom tdse_srm.parquet as tbl1 where TYPE = 'value' and SYSTEMID != 'oracle' GROUP BY ABSTRACTIONID, SHEETID, X, Y ORDER BY SHEETID, X, Y\n              "),children:"Test-based Oracle"}),(0,y.jsx)(p.A,{onClick:e=>M("\n-- pick oracle based on test-based voting (based on mode; most frequent value per test statement)\nSelect \n    ABSTRACTIONID,\n    SHEETID,\n    X,\n    Y,\n    MODE(VALUE) as test_based_oracle,\n    list(DISTINCT VALUE) as distinct_values,\n    (select list(CONCAT(SYSTEMID, '_', VARIANTID, '_', ADAPTERID) ORDER BY SYSTEMID, VARIANTID, ADAPTERID) from tdse_srm.parquet where VALUE = test_based_oracle and TYPE = 'value' and ABSTRACTIONID = tbl1.ABSTRACTIONID and SHEETID = tbl1.SHEETID and X = tbl1.X and Y=tbl1.Y) as matches\nfrom tdse_srm.parquet as tbl1 where TYPE = 'value' and SYSTEMID != 'oracle' and Y > 0 GROUP BY ABSTRACTIONID, SHEETID, X, Y ORDER BY SHEETID, X, Y\n              "),children:"Test-based Oracle (Ignore Create)"})]}),(0,y.jsx)(g.A,{}),(0,y.jsx)(x.A,{target:"_blank",href:n,children:"Download Raw Parquet"}),(0,y.jsx)(g.A,{}),(0,y.jsx)("div",{style:{height:"500px",width:"100%"},children:(0,y.jsx)(E.z,{slots:{toolbar:S.O},rows:j,columns:D,getRowId:e=>Math.floor(1e8*Math.random())})})]})};var w=t(8347);const D=e=>{let{exampleId:n}=e;const t=d.MAP[n].lsl,a=/action\(name: '(.*?)'\)/g,s=/include \'(.*?)'/g,i=/dependsOn \'(.*?)'/g,r=(e,n)=>{let t=0;for(let a=n;a<e.length;a++)if("{"===e[a])t++;else if("}"===e[a]&&(t--,0===t))return a;throw new Error("Unmatched braces")},l=(e=>{const n=[];let t;for(;null!==(t=a.exec(e));){const a=t[1];console.log(`Action Name: ${a}`);const o=t.index+t[0].length,l=r(e,o),m=e.slice(o,l);let p,c,d,u;for(console.log(m);null!==(p=s.exec(m));)console.log(`include Name: ${p[1]}`),c=p[1];for(c||(c="");null!==(d=i.exec(m));)console.log(`dependsOn: ${d[1]}`),u=d[1];u||(u="");let h=a;h.indexOf(",")>=0&&(h=h.split("',")[0],console.log(h)),n.push({name:h,include:c,dependsOn:u})}return n})(t);console.log(l);const m=l.map((e=>({id:e.name}))),p=l.filter((e=>e.dependsOn.length>0)).map((e=>({source:e.dependsOn,target:e.name,label:e.include})));console.log(m),console.log(p);const c={nodes:m,links:p};return(0,y.jsx)(v.A,{container:!0,spacing:2,children:(0,y.jsx)(v.A,{size:12,children:(0,y.jsx)(o.A,{sx:{mt:4,mb:2},variant:"h6",component:"div",children:(0,y.jsx)(w.TS,{id:"graph-id",data:c,config:{directed:!0,nodeHighlightBehavior:!0,d3:{gravity:-100},node:{color:"#25c2a0",size:240,fontSize:16,highlightStrokeColor:"blue",symbolType:"circle"},link:{highlightColor:"lightblue",renderLabel:!0,fontSize:12}},onClickNode:function(e){window.alert(`Clicked node ${e}`)},onClickLink:function(e,n){window.alert(`Clicked link between ${e} and ${n}`)}})})})})};function O(e){const{children:n,value:t,index:a,...s}=e;return(0,y.jsx)("div",{role:"tabpanel",hidden:t!==a,id:`simple-tabpanel-${a}`,"aria-labelledby":`simple-tab-${a}`,...s,children:t===a&&(0,y.jsx)(h.A,{sx:{p:3},children:n})})}function k(e){return{id:`simple-tab-${e}`,"aria-controls":`simple-tabpanel-${e}`}}const I=()=>{const[e,n]=a.useState(0),[t,b]=(0,a.useState)(""),[g,A]=(0,a.useState)(!1),[E,S]=(0,a.useState)(!1),x=(0,a.useRef)(null),T=(0,a.useRef)(null);return(0,y.jsxs)(s.A,{children:[(0,y.jsxs)(i.A,{children:[(0,y.jsx)("title",{children:"TDSE Hub"}),(0,y.jsx)("meta",{name:"description",content:"A hub for TDSEs"})]}),(0,y.jsxs)(o.A,{sx:{margin:2},variant:"h5",component:"div",children:["TDSEHub",(0,y.jsx)(o.A,{variant:"h6",component:"div",children:"Explore LSL Pipelines and their SRMs"})]}),(0,y.jsxs)(v.A,{container:!0,spacing:2,children:[(0,y.jsx)(v.A,{size:3,children:Object.keys(d.MAP).map((e=>(0,y.jsx)(y.Fragment,{children:(0,y.jsxs)(r.A,{sx:{minWidth:275,margin:2},children:[(0,y.jsxs)(l.A,{children:[(0,y.jsx)(o.A,{variant:"h5",component:"div",children:d.MAP[e].label}),(0,y.jsx)(o.A,{sx:{color:"text.secondary",mb:1.5},children:d.MAP[e].classifier}),(0,y.jsx)(o.A,{variant:"body2",children:d.MAP[e].description})]}),(0,y.jsx)(m.A,{children:(0,y.jsx)(p.A,{onClick:t=>{return a=e,n(0),b(a),A(!0),S(!1),x.current&&x.current.getModel()&&x.current.getModel().setValue(d.MAP[a].lsl),void window.scrollTo({top:0,left:0});var a},size:"small",children:"Explore"})})]})})))}),(0,y.jsx)(v.A,{size:9,children:t.length>0?(0,y.jsxs)(h.A,{sx:{width:"100%"},children:[(0,y.jsx)(h.A,{sx:{borderBottom:1,borderColor:"divider"},children:(0,y.jsxs)(c.A,{value:e,onChange:(e,t)=>{n(t)},"aria-label":"basic tabs example",children:[(0,y.jsx)(f.A,{label:"LSL Pipeline",...k(0)}),(0,y.jsx)(f.A,{label:"Graph Viewer",...k(1)}),(0,y.jsx)(f.A,{label:"SRM Explorer",...k(2)})]})}),(0,y.jsx)(O,{value:e,index:0,children:(0,y.jsxs)(y.Fragment,{children:[(0,y.jsxs)(l.A,{children:[(0,y.jsxs)(o.A,{sx:{margin:2},variant:"h5",component:"div",children:["LSL Pipeline Viewer",(0,y.jsx)(o.A,{variant:"h6",component:"div",children:"Explore the study and actions"})]}),(0,y.jsx)(o.A,{sx:{color:"text.secondary",mb:1.5},children:d.MAP[t].description}),(0,y.jsxs)(o.A,{variant:"h5",component:"div",children:[(0,y.jsx)(p.A,{sx:{float:"right"},disabled:!0,children:"Try (coming soon)"}),(0,y.jsx)(u.KE,{height:"500px",defaultLanguage:"java",defaultValue:d.MAP[t].lsl,onMount:function(e,n){n.languages.register({id:"java"}),T.current=n,x.current=e}})]})]}),(0,y.jsx)(m.A,{})]})}),(0,y.jsx)(O,{value:e,index:1,children:(0,y.jsx)(o.A,{variant:"h5",component:"div",children:(0,y.jsx)(D,{exampleId:t})})}),(0,y.jsx)(O,{value:e,index:2,children:(0,y.jsx)(j,{fileName:d.MAP[t].srmpath})})]}):null})]})]})}}}]);