"use strict";(self.webpackChunklasso=self.webpackChunklasso||[]).push([[7774],{2742:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=i(4848),s=i(8453);const l={},r="CellValue Model (SRM)",d={id:"development/CellValue",title:"CellValue Model (SRM)",description:"The CellValue model is used to store SRM-related observational data.",source:"@site/docs/development/CellValue.md",sourceDirName:"development",slug:"/development/CellValue",permalink:"/web/docs/development/CellValue",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/development/CellValue.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Development",permalink:"/web/docs/category/development"},next:{title:"Analyzer Module",permalink:"/web/docs/development/analyzer"}},o={},c=[{value:"Underlying Schema that models cell values of an SRM (inspired by EAV)",id:"underlying-schema-that-models-cell-values-of-an-srm-inspired-by-eav",level:2},{value:"Apache Ignite",id:"apache-ignite",level:3},{value:"Identifying Arena Executions",id:"identifying-arena-executions",level:3},{value:"Identifying Implementations",id:"identifying-implementations",level:3},{value:"Identifying Sequence Sheets",id:"identifying-sequence-sheets",level:3},{value:"Identifying Observations",id:"identifying-observations",level:3}];function a(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"cellvalue-model-srm",children:"CellValue Model (SRM)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"CellValue"})," model is used to store SRM-related observational data."]}),"\n",(0,t.jsx)(n.h2,{id:"underlying-schema-that-models-cell-values-of-an-srm-inspired-by-eav",children:"Underlying Schema that models cell values of an SRM (inspired by EAV)"}),"\n",(0,t.jsx)(n.h3,{id:"apache-ignite",children:"Apache Ignite"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"CREATE MEMORY TABLE SRM.CELLVALUE(\n    -- Apache Ignite key (internal)\n    _KEY OTHER INVISIBLE  NOT NULL, \n    -- Apache Ignite value (internal)\n    _VAL OTHER INVISIBLE ,\n    -- LSL Script execution ID\n    EXECUTIONID VARCHAR NOT NULL,\n    -- LSL Action ID\n    ACTIONID VARCHAR NOT NULL,\n    -- Abstraction container ID\n    ABSTRACTIONID VARCHAR NOT NULL,\n    -- Arena Execution ID\n    ARENAID VARCHAR NOT NULL,\n    -- Sequence Sheet ID (typically name of the test)\n    SHEETID VARCHAR NOT NULL,\n    -- ID of the code as it appears in the code index\n    SYSTEMID VARCHAR NOT NULL,\n    -- A variant of the code depicted by the SYSTEMID above (e.g., mutant code)\n    VARIANTID VARCHAR NOT NULL,\n    -- ID of a particular adapter for the code depicted by the SYSTEMID above as generated part of the adaptation process\n    ADAPTERID VARCHAR NOT NULL,\n    -- Sequence coordinate X (i.e., part of a statement, >= 0)\n    X INT NOT NULL,\n    -- Sequence coordinate Y (i.e., statement, >= 0)\n    Y INT NOT NULL,\n    -- Observation type (e.g., 'value' for output, 'input_value' for input etc.)\n    TYPE VARCHAR,\n    -- Observation value (serialized)\n    VALUE VARCHAR,\n    -- Raw observation value (unserialized)\n    RAWVALUE VARCHAR,\n    -- Object type of observation value\n    VALUETYPE VARCHAR,\n    -- Timestamp of observation\n    LASTMODIFIED TIMESTAMP,\n    -- Execution time (i.e., for observation values)\n    EXECUTIONTIME BIGINT\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"identifying-arena-executions",children:"Identifying Arena Executions"}),"\n",(0,t.jsx)(n.p,{children:"Combination of"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"EXECUTIONID"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"ACTIONID"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"ARENAID"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["In other words, an instance of the arena test driver with ID ",(0,t.jsx)(n.em,{children:"ARENAID"})," is executed as part of an action ",(0,t.jsx)(n.em,{children:"ACTIONID"})," defined by the executed LSL pipeline script ",(0,t.jsx)(n.em,{children:"EXECUTIONID"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Frequent values for the ",(0,t.jsx)(n.em,{children:"ARENAID"})," column include"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"execute*"})," - for normal test execution"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"jacoco*"})," - for code measurements"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pitest*"})," - for mutation testing"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"identifying-implementations",children:"Identifying Implementations"}),"\n",(0,t.jsx)(n.p,{children:"Combination of"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"SYSTEMID"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"ADAPTERID"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"VARIANTID"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["A code unit with ID ",(0,t.jsx)(n.em,{children:"SYSTEMID"})," (as stored in the code index) using adapter ",(0,t.jsx)(n.em,{children:"ADAPTERID"}),". Sometimes, we generate variants of a code unit (e.g., mutated code) which are depicted by ",(0,t.jsx)(n.em,{children:"VARIANTID"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"identifying-sequence-sheets",children:"Identifying Sequence Sheets"}),"\n",(0,t.jsx)(n.p,{children:"Combination of"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"SHEETID"})," (test name)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"X"})," (x-coordinate of the cell)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"Y"})," (y-coordinate of the cell; it identifies the statement)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(X=0,Y)"})," refers to the output value column in a sequence sheet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(X=1,Y)"})," refers to the operation column in a sequence sheet"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(X>1,Y)"})," refers to the input value columns"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"(0,0)"})," refers to the output value by the ",(0,t.jsx)(n.code,{children:"CREATE"})," statement and stores the instance of the class under test as its output"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Note that ",(0,t.jsx)(n.em,{children:"SHEETID"})," is currently represented as a (string) compound key of"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"test name"}),"\n",(0,t.jsx)(n.li,{children:"SYSTEMID"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["separated by ",(0,t.jsx)(n.code,{children:"_"}),". For data manipulation, the postfix part needs to be removed:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"testName_SYSTEMID"})," -> ",(0,t.jsx)(n.code,{children:"testName"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"identifying-observations",children:"Identifying Observations"}),"\n",(0,t.jsx)(n.p,{children:"Combination of"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"VALUE"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"TYPE"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Frequent values for the ",(0,t.jsx)(n.em,{children:"TYPE"})," column (i.e., observational types) include"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"value"})," - for output observations part of responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"input_value"})," - for input observations part of stimuli"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"op"})," - operation name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"seq"})," - Java sequence of statement"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exseq"})," - Test sequence of statements (JUnit like)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"jacoco_*"})," - for code measurements"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);