"use strict";(self.webpackChunklasso=self.webpackChunklasso||[]).push([[4246],{8529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var s=t(4848),a=t(8453);const r={},i="LQL - LASSO Query Language",l={id:"datastructures/lql",title:"LQL - LASSO Query Language",description:"Overview",source:"@site/docs/datastructures/lql.md",sourceDirName:"datastructures",slug:"/datastructures/lql",permalink:"/docs/datastructures/lql",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/datastructures/lql.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Languages",permalink:"/docs/datastructures/languages"},next:{title:"LSL - LASSO Scripting Language (Version 2)",permalink:"/docs/datastructures/lsl"}},c={},o=[{value:"Overview",id:"overview",level:3},{value:"How it Works",id:"how-it-works",level:3},{value:"Interface-driven Code Search (IDCS)",id:"interface-driven-code-search-idcs",level:4},{value:"Sequence Sheet Notation (SSN)",id:"sequence-sheet-notation-ssn",level:4},{value:"ANTLR4 Grammar",id:"antlr4-grammar",level:3},{value:"JUnit Tests (Demonstrations)",id:"junit-tests-demonstrations",level:3},{value:"Language",id:"language",level:3},{value:"Typical Format",id:"typical-format",level:4},{value:"Stack Example",id:"stack-example",level:4},{value:"Placeholders",id:"placeholders",level:4},{value:"Filters",id:"filters",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"lql---lasso-query-language",children:"LQL - LASSO Query Language"}),"\n",(0,s.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["LQL (LASSO Query Language) is a language used to define the interface of a functional abstraction or concrete code unit (e.g., class). It plays a crucial role in the ",(0,s.jsx)(n.a,{href:"https://github.com/SoftwareObservatorium/lasso",children:"LASSO"})," framework, enabling features such as:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Interface-driven code search"})," (IDCS): LQL is translated into Solr/Lucene queries to retrieve textual candidates that match a given interface specification."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequence Sheet Notation"})," (SSN): LQL defines the interface used by sequence sheets to identify units under test (e.g., class under test)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,s.jsx)(n.h4,{id:"interface-driven-code-search-idcs",children:"Interface-driven Code Search (IDCS)"}),"\n",(0,s.jsx)(n.p,{children:"In IDCS, LQL is converted into Solr/Lucene queries and optional filter queries to retrieve a set of textual candidates that match a given interface specification."}),"\n",(0,s.jsx)(n.h4,{id:"sequence-sheet-notation-ssn",children:"Sequence Sheet Notation (SSN)"}),"\n",(0,s.jsx)(n.p,{children:"LQL defines the interface used by sequence sheets to identify Systems Under Test (SUT)."}),"\n",(0,s.jsx)(n.h3,{id:"antlr4-grammar",children:"ANTLR4 Grammar"}),"\n",(0,s.jsxs)(n.p,{children:["The grammar for LQL is written using ",(0,s.jsx)(n.a,{href:"https://www.antlr.org/",children:"ANTLR4"}),". You can find it in:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Location"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/SoftwareObservatorium/lasso/blob/develop/lql/src/main/antlr4/de/uni_mannheim/swt/lasso/lql/LQL.g4",children:"LQL.g4"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Generated Java Stub"}),": The Java stub is generated as part of Maven's build cycle (e.g., ",(0,s.jsx)(n.code,{children:"mvn package"}),"), see ",(0,s.jsx)(n.a,{href:"https://www.antlr.org/maven-plugin/",children:"ANTLR4 Maven plugin"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"junit-tests-demonstrations",children:"JUnit Tests (Demonstrations)"}),"\n",(0,s.jsx)(n.p,{children:"The existing JUnit tests demonstrate all features present in LQL:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Location"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/SoftwareObservatorium/lasso/blob/develop/lql/src/test/java/de/uni_mannheim/swt/lasso/lql/LQLParserTest.java",children:"LQLParserTest.java"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"language",children:"Language"}),"\n",(0,s.jsx)(n.h4,{id:"typical-format",children:"Typical Format"}),"\n",(0,s.jsx)(n.p,{children:"The typical format of a LQL interface definition is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"InterfaceName {\n    constructor(fullyQualifiedInputTypes*)\n    methodName(fullyQualifiedInputTypes*)->fullyQualifiedOutputTypes*\n} filters*\n"})}),"\n",(0,s.jsx)(n.p,{children:"where:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"InterfaceName"})," usually denotes the name of the functional abstraction at hand."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"constructor"})," an optional constructor (initializer)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"methodName"})," zero or more method signatures separated with newline, including an optional list of fully-qualified input parameter types as well as output parameter types separated by comma."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"stack-example",children:"Stack Example"}),"\n",(0,s.jsxs)(n.p,{children:["Here's a sample interface definition for a ",(0,s.jsx)(n.code,{children:"Stack"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Stack {\n    push(java.lang.Object)->java.lang.Object\n    pop()->java.lang.Object\n    peek()->java.lang.Object\n    size()->int\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This example includes filters that represent a negative list in IDCS (fully optional):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"!name_fq:Queue !name_fq:Deque\n"})}),"\n",(0,s.jsx)(n.h4,{id:"placeholders",children:"Placeholders"}),"\n",(0,s.jsxs)(n.p,{children:["In case the interface name is unimportant or missing, you can use placeholders like ",(0,s.jsx)(n.code,{children:"$"})," to denote any name:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"$ {\n    encode(byte[])->java.lang.String\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that placeholders must start with a dollar sign (",(0,s.jsx)(n.code,{children:"$"}),")."]}),"\n",(0,s.jsx)(n.h4,{id:"filters",children:"Filters"}),"\n",(0,s.jsxs)(n.p,{children:["Filters are fully optional. They can also be set in LSL using the ",(0,s.jsx)(n.code,{children:"_filter_"})," command as part of the selection action."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var s=t(6540);const a={},r=s.createContext(a);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);