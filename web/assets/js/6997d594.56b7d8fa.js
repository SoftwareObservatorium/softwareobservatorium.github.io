"use strict";(self.webpackChunklasso=self.webpackChunklasso||[]).push([[2758],{8583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(4848),a=t(8453);const s={sidebar_position:3},o="LSL - LASSO Scripting Language (Version 2)",r={id:"datastructures/lsl",title:"LSL - LASSO Scripting Language (Version 2)",description:"Pipelines",source:"@site/docs/datastructures/lsl.md",sourceDirName:"datastructures",slug:"/datastructures/lsl",permalink:"/web/docs/datastructures/lsl",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/datastructures/lsl.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"LQL - LASSO Query Language",permalink:"/web/docs/datastructures/lql"},next:{title:"Installation",permalink:"/web/docs/category/installation"}},l={},c=[{value:"Pipelines",id:"pipelines",level:2},{value:"Anatomy of an LSL Script",id:"anatomy-of-an-lsl-script",level:2},{value:"Actions",id:"actions",level:2},{value:"Types",id:"types",level:3},{value:"Without Java Action class counterpart",id:"without-java-action-class-counterpart",level:4},{value:"With Java Action class counterpart",id:"with-java-action-class-counterpart",level:4},{value:"Lifecycle",id:"lifecycle",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Configuration of Java Action Class",id:"configuration-of-java-action-class",level:4},{value:"Using Configure Block",id:"using-configure-block",level:5},{value:"Using Properties",id:"using-properties",level:5},{value:"Configuration of Pipeline (Execution DAG/Dependency DAG)",id:"configuration-of-pipeline-execution-dagdependency-dag",level:4},{value:"Profiles for Dynamic Analysis (Run-time environment &amp; analysis scope)",id:"profiles-for-dynamic-analysis-run-time-environment--analysis-scope",level:2},{value:"Global (Reusable) Profiles",id:"global-reusable-profiles",level:3},{value:"Local Profile",id:"local-profile",level:3},{value:"Resuming Studies at some point / Referencing other Studies",id:"resuming-studies-at-some-point--referencing-other-studies",level:2},{value:"Benchmarks",id:"benchmarks",level:2},{value:"Within Study Block",id:"within-study-block",level:3},{value:"Within Action Block",id:"within-action-block",level:3},{value:"Creating stimulus matrices",id:"creating-stimulus-matrices",level:2},{value:"Adding implementations",id:"adding-implementations",level:3},{value:"Known (Maven) Artifacts",id:"known-maven-artifacts",level:4},{value:"JDK Classes",id:"jdk-classes",level:4},{value:"Code Search",id:"code-search",level:4},{value:"Interface-Driven Code Search (LQL)",id:"interface-driven-code-search-lql",level:5},{value:"Code Generation",id:"code-generation",level:4},{value:"Individual",id:"individual",level:4},{value:"Adding Tests",id:"adding-tests",level:3},{value:"Manual Tests in LSL",id:"manual-tests-in-lsl",level:4},{value:"Existing Tests from Benchmarks",id:"existing-tests-from-benchmarks",level:4},{value:"Test Generation with EvoSuite",id:"test-generation-with-evosuite",level:4},{value:"Random Test Generation",id:"random-test-generation",level:4},{value:"Type-Aware Test Mutation",id:"type-aware-test-mutation",level:4},{value:"Generate Tests with LLMs",id:"generate-tests-with-llms",level:4},{value:"Based on Implementation",id:"based-on-implementation",level:5},{value:"Arena Test Driver",id:"arena-test-driver",level:2},{value:"Arena: Stimulus Matrices are NOT partitioned by Implementations.",id:"arena-stimulus-matrices-are-not-partitioned-by-implementations",level:3},{value:"Mutation Testing",id:"mutation-testing",level:4},{value:"Code Coverage",id:"code-coverage",level:4},{value:"Arena: Stimulus Matrices are Partitioned by Implementations",id:"arena-stimulus-matrices-are-partitioned-by-implementations",level:3},{value:"Code Clone Detection",id:"code-clone-detection",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"lsl---lasso-scripting-language-version-2",children:"LSL - LASSO Scripting Language (Version 2)"}),"\n",(0,i.jsx)(n.h2,{id:"pipelines",children:"Pipelines"}),"\n",(0,i.jsx)(n.p,{children:"LSL pipeline scripts are composed of actions (i.e., analysis steps) that facilitate the creation, reading, updating, or deletion of stimulus matrices."}),"\n",(0,i.jsxs)(n.p,{children:["For a visual illustration of how LSL pipelines process stimulus response matrices and to gain a deeper understanding of this concept, please refer to our introductory documentation available ",(0,i.jsx)(n.a,{href:"/web/pdfviewer?f=intro.pdf",children:"here"}),"."]}),"\n",(0,i.jsx)(n.h1,{id:"lsl---lasso-scripting-language-version-2-1",children:"LSL - LASSO Scripting Language (Version 2)"}),"\n",(0,i.jsx)(n.p,{children:"(in progress)"}),"\n",(0,i.jsx)(n.h2,{id:"anatomy-of-an-lsl-script",children:"Anatomy of an LSL Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"// HEADER: global study configuration\ndataSource 'XXX' // global data source of executable corpus (Solr code index, Nexus artifact repository)\n\n// global fields ...\n\n// STUDY BLOCK\nstudy(name: 'StudyName') {\n    // one or more ACTION BLOCKS, study configuration (e.g., loading of benchmarks) etc.\n    action(name: \"ActionName\") {\n        // ...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsx)(n.h4,{id:"without-java-action-class-counterpart",children:"Without Java Action class counterpart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName") {\n    //...\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"with-java-action-class-counterpart",children:"With Java Action class counterpart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName", type: "ActionType") {\n    //...\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"General structure of a Java Action class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@LassoAction(desc = "An action with no behaviour")\npublic class NoOp extends DefaultAction {\n\n    @LassoInput(desc = "a configuration parameter", optional = true)\n    public String paramExample;\n\n    @Override\n    public void execute(LSLExecutionContext ctx, ActionConfiguration conf) throws IOException {\n        // abstraction container (SM)\n        Abstraction abstraction = conf.getAbstraction();\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that even pure LSL actions have a Java Action class counterpart (i.e., ",(0,i.jsx)(n.strong,{children:"type: 'NoOp'"}),")"]}),"\n",(0,i.jsx)(n.h3,{id:"lifecycle",children:"Lifecycle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName", type: "ActionType") {\n    configure {\n        // (1) configure block is called to configure the Java Action class counterpart\n        // Note: typically only needed for LSL actions with an LSL Action class counterpart\n    }\n    \n    execute {\n        // (2) execute LSL commands BEFORE the Java Action class is executed\n        // Note: typically only needed for LSL actions without an LSL Action class counterpart\n    }\n\n    analyze() {\n        // (3) analyze results directly after execution of the Java Action class\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h4,{id:"configuration-of-java-action-class",children:"Configuration of Java Action Class"}),"\n",(0,i.jsx)(n.h5,{id:"using-configure-block",children:"Using Configure Block"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName", type: "ActionType") {\n    configure {\n        // (1) configure block is called to configure the Java Action class counterpart\n        mySetting = "myvalue"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h5,{id:"using-properties",children:"Using Properties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName", type: "ActionType") {\n    mySetting = "myvalue"\n    // ...\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"configuration-of-pipeline-execution-dagdependency-dag",children:"Configuration of Pipeline (Execution DAG/Dependency DAG)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: \"ActionName\", type: \"ActionType\") {\n    dependsOn 'actionName' // action filter: specify on which other actions this action depends\n    include '*' // stimulus matrix filter: specify which stimulus matrices to filter (by name of the stimulus matrix; i.e., abstraction name)\n\n    includeTests '*'\n    includeImplementations {name -> // closure \n        stimulusMatrices[name].implementations?.findAll { impl -> impl.id == 'XXX'} // return filtered list\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"profiles-for-dynamic-analysis-run-time-environment--analysis-scope",children:"Profiles for Dynamic Analysis (Run-time environment & analysis scope)"}),"\n",(0,i.jsx)(n.p,{children:"Profiles can be declared within a study block or as part of the configuration block of an action."}),"\n",(0,i.jsx)(n.h3,{id:"global-reusable-profiles",children:"Global (Reusable) Profiles"}),"\n",(0,i.jsx)(n.p,{children:"e.g., setting Java JDK 17."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"// profile for execution\nprofile('java17Profile') {\n    scope('class') { type = 'class' }\n    environment('java17') {\n        image = 'maven:3.9-eclipse-temurin-17'\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Referencing study profile in action"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: \"ActionName\") {\n    //...\n    profile('java17Profile') // reference by name\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"local-profile",children:"Local Profile"}),"\n",(0,i.jsx)(n.p,{children:"e.g., setting Java JDK 17."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: \"ActionName\") {\n    //...\n    profile('java17Profile') {\n        scope('class') { type = 'class' }\n        environment('java17') {\n            image = 'maven:3.9-eclipse-temurin-17'\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"resuming-studies-at-some-point--referencing-other-studies",children:"Resuming Studies at some point / Referencing other Studies"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: \"ActionName\") {\n    dependsOn 'executionId:actionName' // URI: LSL script execution id \":\" action name\n    include '*' // specify which stimulus matrices to filter\n    \n    // ...\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"benchmarks",children:"Benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"Loading benchmarks integrated into the LASSO platform."}),"\n",(0,i.jsx)(n.h3,{id:"within-study-block",children:"Within Study Block"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'def humanEval = loadBenchmark("humaneval-java-reworded")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"within-action-block",children:"Within Action Block"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: "ActionName") {\n    def humanEval = loadBenchmark("humaneval-java-reworded")\n    //...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-stimulus-matrices",children:"Creating stimulus matrices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'createStimulusMatrix') {\n    execute {\n        // create new stimulus matrix: abstraction name, interface specification in LQL, list of implementations, list of tests\n        stimulusMatrix('AbstractionName', 'LQL', [/*implementations*/], [/*tests*/])\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"adding-implementations",children:"Adding implementations"}),"\n",(0,i.jsx)(n.h4,{id:"known-maven-artifacts",children:"Known (Maven) Artifacts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'// command\nimplementation("ID", "CLASSNAME", "MAVENCOORDINATES")\n\n// example\nimplementation("1", "org.apache.commons.codec.binary.Base64", "commons-codec:commons-codec:1.15")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"jdk-classes",children:"JDK Classes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'// command\nimplementation("ID", "CLASSNAME")\n\n// example\nimplementation("3", "java.util.LinkedList")\n'})}),"\n",(0,i.jsx)(n.h4,{id:"code-search",children:"Code Search"}),"\n",(0,i.jsx)(n.h5,{id:"interface-driven-code-search-lql",children:"Interface-Driven Code Search (LQL)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"/* query implementation candidates using interface-driven code search via LQL */\naction(name: 'select', type: 'Search') {\n    // ...\n    \n    query { stimulusMatrix ->\n        def query = [:] // create query model\n        query.queryContent = stimulusMatrix.lql\n        query.rows = 10\n        query.dataSource = \"XXX\" // optional: may override global data source\n        query.filters = [/*query filters*/]\n        return [query] // list of queries is expected\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"code-generation",children:"Code Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: \'generateCodeLlama\', type: \'GenerateCodeOllama\') {\n    // ...\n\n    // custom DSL command offered by the action (for each stimulus matrix, create prompts to obtain implementations)\n    prompt { stimulusMatrix ->\n        // can by for any prompts: FA, impls, models etc.\n        def prompt = [:] // create prompt model\n        prompt.promptContent = """implement a java class with the following interface specification, but do not inherit a java interface: ```${stimulusMatrix.lql}```. Only output the java class and nothing else."""\n        prompt.id = "lql_prompt"\n        return [prompt] // list of prompts is expected\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Generate for each implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'prompt { stimulusMatrix ->\n    List prompts = stimulusMatrix.implementations.collect { impl ->\n        def prompt = [:] // create prompt model\n        prompt.promptContent = """generate a diverse variant of the following code unit: ```${impl.code.content}```. Only output the variant class and nothing else."""\n        prompt.id = "lql_prompt"\n        prompt.model = "llama3.1:latest"\n        return prompt\n    }\n\n    return prompts\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"individual",children:"Individual"}),"\n",(0,i.jsx)(n.p,{children:"Implementations can be combined, of course."}),"\n",(0,i.jsx)(n.h3,{id:"adding-tests",children:"Adding Tests"}),"\n",(0,i.jsx)(n.h4,{id:"manual-tests-in-lsl",children:"Manual Tests in LSL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"test(name: 'testPush()') {\n    row '',  'create', 'Stack'\n    row '',  'push',   'A1',     '\"Hi\"'\n    row '',  'size',   'A1'\n}\n\ntest(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Hello World!\") {\n    row '',  'create', 'Stack'\n    row '',  'push',   'A1',     '?p1'\n    row '',  'size',   'A1'\n}\n\ntest(name: 'testPushParameterized(p1=java.lang.String)', p1: \"Bla blub!\") // e.g., parameterized\n"})}),"\n",(0,i.jsx)(n.h4,{id:"existing-tests-from-benchmarks",children:"Existing Tests from Benchmarks"}),"\n",(0,i.jsx)(n.p,{children:"HumanEval, mbpp from MultiPL-E."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'// load benchmark\ndef humanEval = loadBenchmark("humaneval-java-reworded")\n\naction(name: "createStimulusMatrices") {\n    execute {\n        // create stimulus matrices for given problems\n        def myProblems = [humanEval.abstractions[\'HumanEval_13_greatest_common_divisor\']]\n        myProblems.each { problem ->\n            stimulusMatrix(problem.id, problem.lql, [/*impls*/], problem.tests, problem.dependencies) // id, interface, impls, tests, dependencies\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"test-generation-with-evosuite",children:"Test Generation with EvoSuite"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'evoSuite', type: 'EvoSuite') {\n    searchBudget = 30 // we need this as upper bound for timeouts\n    stoppingCondition = \"MaxTime\"\n    //criterion = \"LINE:BRANCH:EXCEPTION:WEAKMUTATION:OUTPUT:METHOD:METHODNOEXCEPTION:CBRANCH\"\n\n    dependsOn 'generateTestsLlama'\n    include '*'\n    profile('java11Profile')\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Note: EvoSuite does not work with Java > 11."}),"\n",(0,i.jsx)(n.h4,{id:"random-test-generation",children:"Random Test Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'random', type: 'RandomTestGen') { // add more tests\n    noOfTests = 5 // create 5 additional random tests\n    shuffleSequence = false\n\n    dependsOn 'typeAware'\n    include '*'\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"type-aware-test-mutation",children:"Type-Aware Test Mutation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'typeAware', type: 'TypeAwareMutatorTestGen') { // add more tests\n    noOfTests = 1 // create one mutation per existing test\n\n    dependsOn 'generateCodeDeepSeek'\n    include '*'\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"generate-tests-with-llms",children:"Generate Tests with LLMs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'action(name: \'generateTestsLlama\', type: \'GenerateTestsOllama\') {\n// pipeline specific\ndependsOn \'random\'\ninclude \'*\'\nprofile(\'java17Profile\')\n\n// action configuration block \nollamaBaseUrl = "http://bagdana.informatik.uni-mannheim.de:11434"\nmodel = "llama3.1:latest" // LLM\nsamples = 10 // how many to sample\n  \nprompt { stimulusMatrix ->\n    def prompt = [:] // create prompt model\n    prompt.promptContent = """generate a junit test class to test the functionality of the following interface specification: ```${stimulusMatrix.lql}```. Assume that the specification is encapsulated in a class that uses the same naming as in the interface specification. Only output the JUnit test class and nothing else."""\n    prompt.id = "lql_prompt"\n    return [prompt] // list of prompts is expected\n}  \n}\n'})}),"\n",(0,i.jsx)(n.h5,{id:"based-on-implementation",children:"Based on Implementation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'prompt { stimulusMatrix ->\n    List prompts = stimulusMatrix.implementations.collect { impl ->\n        def prompt = [:] // create prompt model\n        prompt.promptContent = """generate a junit test class to test the functionality of the following java class `${impl.code.name}` : ```${impl.code.content}```. Initialize the class and call its methods. Only output the JUnit test class and nothing else."""\n        prompt.id = "lql_prompt"\n        return prompt\n    }\n\n    return prompts\n}  \n'})}),"\n",(0,i.jsx)(n.h2,{id:"arena-test-driver",children:"Arena Test Driver"}),"\n",(0,i.jsx)(n.h3,{id:"arena-stimulus-matrices-are-not-partitioned-by-implementations",children:"Arena: Stimulus Matrices are NOT partitioned by Implementations."}),"\n",(0,i.jsx)(n.p,{children:"Strategy: full stimulus matrix is processed by one machine."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'filter', type: 'Arena') { // run all collected stimulus sheets in arena\n    maxAdaptations = 1 // how many adaptations to try\n    //features = [\"cc\", \"mutation\"]\n\n    dependsOn 'evoSuite'\n    include '*'\n    profile('java17Profile')\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"mutation-testing",children:"Mutation Testing"}),"\n",(0,i.jsx)(n.p,{children:"Pitest is used for mutation testing internally."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'    features = ["mutation"]\n'})}),"\n",(0,i.jsx)(n.h4,{id:"code-coverage",children:"Code Coverage"}),"\n",(0,i.jsx)(n.p,{children:"JaCoCo is used for code coverage measurements internally."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:'    features = ["mutation"]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"arena-stimulus-matrices-are-partitioned-by-implementations",children:"Arena: Stimulus Matrices are Partitioned by Implementations"}),"\n",(0,i.jsx)(n.p,{children:"A stimulus matrix can be further partitioned into multiple sub-stimulus matrices by partitioning into blocks of implementations. This assumes that all tests are available in distributed mode."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'filter', type: 'ArenaPartitioning') { // run all collected stimulus sheets in arena\n    maxAdaptations = 1 // how many adaptations to try\n    //features = [\"cc\", \"mutation\"]\n\n    dependsOn 'evoSuite'\n    include '*'\n    profile('java17Profile')\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"code-clone-detection",children:"Code Clone Detection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-groovy",children:"action(name: 'filter', type: 'Nicad6') {\n    collapseClones = true // drop clones\n\n    dependsOn 'generateCodeLlama'\n    include '*'\n    profile('nicad:6.2')\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);